

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.hardware.Servo;
import java.util.Map;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

/*
 * This particular OpMode illustrates driving a 4-motor Omni-Directional (or Holonomic) robot.
 * This code will work with either a Mecanum-Drive or an X-Drive train.
 * Both of these drives are illustrated at https://gm0.org/en/latest/docs/robot-design/drivetrains/holonomic.html
 * Note that a Mecanum drive must display an X roller-pattern when viewed from above.
 *
 * Also note that it is critical to set the correct rotation direction for each motor.  See details below.
 *
 * Holonomic drives provide the ability for the robot to move in three axes (directions) simultaneously.
 * Each motion axis is controlled by one Joystick axis.
 *
 * 1) Axial:    Driving forward and backward               Left-joystick Forward/Backward
 * 2) Lateral:  Strafing right and left                     Left-joystick Right and Left
 * 3) Yaw:      Rotating Clockwise and counter clockwise    Right-joystick Right and Left
 *
 * This code is written assuming that the right-side motors need to be reversed for the robot to drive forward.
 * When you first test your robot, if it moves backward when you push the left stick forward, then you must flip
 * the direction of all 4 motors (see code below).
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list
 */

@TeleOp(name="SlowDriveMode", group="Linear OpMode")

public class SlowDriveMode extends LinearOpMode {

    // Declare OpMode members for each of the 4 motors.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor leftFrontDrive = null;
    private DcMotor leftBackDrive = null;
    private DcMotor rightFrontDrive = null;
    private DcMotor rightBackDrive = null;
    private DcMotor pullermotor = null;
    private DcMotor pickupmotor = null;
    private DcMotor bonusmotor = null;
    private Servo servo_1; // servo_gripper
    private Servo servo_2; // plane_launch
    private TouchSensor limit;
    

    @Override
    public void runOpMode() {
        pickupmotor  = hardwareMap.get(DcMotor.class, "pickup");

        // Initialize the hardware variables. Note that the strings used here must correspond
        // to the names assigned during the robot configuration step on the DS or RC devices.
        leftFrontDrive  = hardwareMap.get(DcMotor.class, "left_front");
        leftBackDrive  = hardwareMap.get(DcMotor.class, "left_back");
        rightFrontDrive = hardwareMap.get(DcMotor.class, "right_front");
        rightBackDrive = hardwareMap.get(DcMotor.class, "right_back");
        pullermotor = hardwareMap.get(DcMotor.class, "intakemotor");
        bonusmotor = hardwareMap.get(DcMotor.class, "bonusmotor");
        servo_1 = hardwareMap.get(Servo.class, "servo_1");
        servo_2 = hardwareMap.get(Servo.class, "servo_2");  // plane_launch
        pickupmotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        pickupmotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        pickupmotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //limit = hardwareMap.get(TouchSensor.class, "four_bar_limit");
        
        //-------------------------------------------------------------
        
        leftFrontDrive.setDirection(DcMotor.Direction.REVERSE);
        leftBackDrive.setDirection(DcMotor.Direction.REVERSE);
        rightFrontDrive.setDirection(DcMotor.Direction.FORWARD);
        rightBackDrive.setDirection(DcMotor.Direction.FORWARD);
        pickupmotor.setDirection(DcMotor.Direction.FORWARD);
        pullermotor.setDirection(DcMotor.Direction.REVERSE);
        bonusmotor.setDirection(DcMotor.Direction.FORWARD);
        
        //pullermotor.setPower(0);
        //pullermotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //-------------------------------------------------------------
        
        int motorupos = 80;
        int motordownpos = 0;

        //pickupmotor.setTargetPosition(motordownpos);
        //pickupmotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        // Wait for the game to start (driver presses PLAY)
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        
        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {
            double max;

            // POV Mode uses left joystick to go forward & strafe, and right joystick to rotate.
            double axial   = -gamepad1.left_stick_y / 2;  // Note: pushing stick forward gives negative value
            double lateral = gamepad1.left_stick_x / 2;
            double yaw     = gamepad1.right_stick_x;
            
            double slowModeAxial = 0.5;
            double slowModeLateral = 0.5;
            double slowModeYaw = 0.2;
            
            // Send calculated power to wheels
            if (gamepad1.left_trigger == 1) {
                axial = axial*slowModeAxial;
                lateral = lateral*slowModeLateral;
                yaw = yaw*slowModeYaw;
            }
            

            // Combine the joystick requests for each axis-motion to determine each wheel's power.
            // Set up a variable for each drive wheel to save the power level for telemetry.
            double leftFrontPower  = axial + lateral + yaw;
            double rightFrontPower = axial - lateral - yaw;
            double leftBackPower   = axial - lateral + yaw;
            double rightBackPower  = axial + lateral - yaw;
            
            // Normalize the values so no wheel power exceeds 100%.
            // This ensures that the robot maintains the desired motion.
            max = Math.max(Math.abs(leftFrontPower), Math.abs(rightFrontPower));
            max = Math.max(max, Math.abs(leftBackPower));
            max = Math.max(max, Math.abs(rightBackPower));

            
            if (max > 1.0) {
                leftFrontPower  /= max;
                rightFrontPower /= max;
                leftBackPower   /= max;
                rightBackPower  /= max;
            }
            
             if (gamepad2.b) {
                 servo_1.setPosition(0.1);
             }
             if (gamepad2.x) {
                 servo_1.setPosition(0.5); // previously set to 0.5
             }
             
             //---------------------------------------------------
             // These keybinds can be changed, they are not final!
             if (gamepad2.dpad_up) {
                 servo_2.setPosition(0);
             }
             if (gamepad2.dpad_down) {
                 servo_2.setPosition(1);
             }
             //---------------------------------------------------

            
            if (gamepad2.y) {
                pickupmotor.setTargetPosition(motorupos);
                pickupmotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                pickupmotor.setPower(1);
            }
            if (gamepad2.a) {
                pickupmotor.setTargetPosition(motordownpos);
                pickupmotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                pickupmotor.setPower(1);
            }
            
            // UP DOWN MOTOR IS pullermotor

            int level = 1200;
            
            if (gamepad2.right_stick_y < 0) {
                pullermotor.setTargetPosition(level);
                pullermotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                pullermotor.setPower(1.0);
            }
            else if (gamepad2.right_stick_y > 0) {
                pullermotor.setTargetPosition(0);
                pullermotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                pullermotor.setPower(-1.0);
            }
            
            // HANG
            int hang = 2000;
            if (gamepad2.right_trigger == 1) {
                pullermotor.setTargetPosition(hang);
                pullermotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                pullermotor.setPower(1.0);
            }
            else if (gamepad2.right_trigger == 0) {
                pullermotor.setTargetPosition(-10);
                pullermotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                pullermotor.setPower(-1.0);
            }
            
            
            // Send calculated power to wheels
            leftFrontDrive.setPower(leftFrontPower);
            rightFrontDrive.setPower(rightFrontPower);
            leftBackDrive.setPower(leftBackPower);
            rightBackDrive.setPower(rightBackPower);


            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Front left/Right", "%4.2f, %4.2f", leftFrontPower, rightFrontPower);
            telemetry.addData("Back  left/Right", "%4.2f, %4.2f", leftBackPower, rightBackPower);
            
            //--------------------------------------------------------------------------

            telemetry.addData("rFntDrv pos", "%d", leftBackDrive.getCurrentPosition()); // is NEGATIVE
            telemetry.addData("rBakDrv pos", "%d", rightFrontDrive.getCurrentPosition());
            telemetry.addData("lFntDrv pos", "%d", rightBackDrive.getCurrentPosition()); // is NEGATIVE
            telemetry.addData("lBakDrv pos", "%d", leftFrontDrive.getCurrentPosition());
            telemetry.addData("PkupMtr pos", "%d", pickupmotor.getCurrentPosition());
            telemetry.addData("PulrMtr pos", "%d", pullermotor.getCurrentPosition());
            //telemetry.addData("PlnLnch pos", "%4.2f", servo_2.getCurrentPosition());
            
            //--------------------------------------------------------------------------
            
            telemetry.update();
        }
        

    }}
